// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTcpdump returns the embedded CollectionSpec for tcpdump.
func loadTcpdump() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcpdumpBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tcpdump: %w", err)
	}

	return spec, err
}

// loadTcpdumpObjects loads tcpdump and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcpdumpObjects
//	*tcpdumpPrograms
//	*tcpdumpMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcpdumpObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTcpdump()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcpdumpSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpdumpSpecs struct {
	tcpdumpProgramSpecs
	tcpdumpMapSpecs
}

// tcpdumpSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpdumpProgramSpecs struct {
	CollectTcpPackets *ebpf.ProgramSpec `ebpf:"collect_tcp_packets"`
}

// tcpdumpMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcpdumpMapSpecs struct {
	TcpEvents *ebpf.MapSpec `ebpf:"tcp_events"`
}

// tcpdumpObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcpdumpObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpdumpObjects struct {
	tcpdumpPrograms
	tcpdumpMaps
}

func (o *tcpdumpObjects) Close() error {
	return _TcpdumpClose(
		&o.tcpdumpPrograms,
		&o.tcpdumpMaps,
	)
}

// tcpdumpMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcpdumpObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpdumpMaps struct {
	TcpEvents *ebpf.Map `ebpf:"tcp_events"`
}

func (m *tcpdumpMaps) Close() error {
	return _TcpdumpClose(
		m.TcpEvents,
	)
}

// tcpdumpPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcpdumpObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcpdumpPrograms struct {
	CollectTcpPackets *ebpf.Program `ebpf:"collect_tcp_packets"`
}

func (p *tcpdumpPrograms) Close() error {
	return _TcpdumpClose(
		p.CollectTcpPackets,
	)
}

func _TcpdumpClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tcpdump_bpfeb.o
var _TcpdumpBytes []byte
